[default]
[Threat - Auditd - ESCU - Linux File Created In Kernel Driver Directory - Rule - Rule]
action.correlationsearch.annotations = {"analytic_story":["Linux Privilege Escalation","Linux Persistence Techniques","Linux Rootkit"],"cis20":["CIS 10"],"confidence":90,"impact":80,"kill_chain_phases":["Installation","Exploitation"],"mitre_attack":["T1547.006","T1547"],"nist":["DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Auditd - ESCU - Linux File Created In Kernel Driver Directory - Rule
action.email.inline = false
action.email.sendpdf = false
action.email.sendresults = false
action.email.track_alert = true
action.email.use_ssl = false
action.email.use_tls = false
action.email.width_sort_columns = true
action.escu.analytic_story = ["Linux Privilege Escalation", "Linux Persistence Techniques", "Linux Rootkit"]
action.escu.confidence = high
action.escu.creation_date = 2021-12-22
action.escu.data_models = ["Endpoint"]
action.escu.eli5 = This analytic looks for suspicious file creation in kernel/driver directory in linux platform. This directory is known folder for all linux kernel module available within the system. so creation of file in this directory is a good indicator that there is a possible rootkit installation in the host machine. This technique was abuse by adversaries, malware author and red teamers to gain high privileges to their malicious code such us in kernel level. Even this event is not so common administrator or legitimate 3rd party tool may install driver or linux kernel module as part of its installation.
action.escu.enabled = 1
action.escu.full_search_name = ESCU - Linux File Created In Kernel Driver Directory - Rule
action.escu.how_to_implement = To successfully implement this search, you need to be ingesting logs with the file name, file path, and process_guid executions from your endpoints. If you are using Sysmon, you can use the Add-on for Linux Sysmon from Splunkbase.
action.escu.known_false_positives = Administrator or network operator can create file in this folders for automation purposes. Please update the filter macros to remove false positives.
action.escu.mappings = {"cis20": ["CIS 10"], "kill_chain_phases": ["Installation", "Exploitation"], "mitre_attack": ["T1547.006", "T1547"], "nist": ["DE.AE"]}
action.escu.modification_date = 2021-12-22
action.escu.product = ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"]
action.escu.providing_technologies = ["Sysmon", "Microsoft Windows", "Carbon Black Response", "CrowdStrike Falcon", "Symantec Endpoint Protection"]
action.escu.search_type = detection
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.populate_lookup.track_alert = false
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":72}]
action.risk.param._risk_message = A file $file_name$ is created in $file_path$ on $dest$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.rss.track_alert = false
action.script.track_alert = true
action.send2uba.param.verbose = 0
action.summary_index.inline = true
action.summary_index.track_alert = false
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = true
alert.suppress = 0
alert.track = false
allow_skew = 100%
auto_summarize = false
counttype = number of events
cron_schedule = 0 * * * *
description = This analytic looks for suspicious file creation in kernel/driver directory in linux platform. This directory is known folder for all linux kernel module available within the system. so creation of file in this directory is a good indicator that there is a possible rootkit installation in the host machine. This technique was abuse by adversaries, malware author and red teamers to gain high privileges to their malicious code such us in kernel level. Even this event is not so common administrator or legitimate 3rd party tool may install driver or linux kernel module as part of its installation.
dispatch.allow_partial_results = true
dispatch.earliest_time = -70m@m
dispatch.latest_time = -10m@m
dispatch.lookups = true
dispatch.rt_backfill = false
dispatch.spawn_process = true
enableSched = true
is_visible = false
quantity = 0
realtime_schedule = false
relation = greater than
restart_on_searchpeer_add = true
run_on_startup = false
schedule_window = auto
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN ("*/kernel/drivers/*") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_file_created_in_kernel_driver_directory_filter`

[Threat - Auditd - ESCU - Linux PHP Privilege Escalation - Rule - Rule]
action.correlationsearch.annotations = {"analytic_story":["Linux Privilege Escalation","Linux Living Off The Land"],"cis20":["CIS 10"],"confidence":50,"impact":60,"kill_chain_phases":["Exploitation"],"mitre_attack":["T1548.003","T1548"],"nist":["DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Auditd - ESCU - Linux PHP Privilege Escalation - Rule
action.email.inline = false
action.email.sendpdf = false
action.email.sendresults = false
action.email.track_alert = true
action.email.use_ssl = false
action.email.use_tls = false
action.email.width_sort_columns = true
action.escu.analytic_story = ["Linux Privilege Escalation", "Linux Living Off The Land"]
action.escu.confidence = high
action.escu.creation_date = 2022-08-09
action.escu.data_models = ["Endpoint"]
action.escu.eli5 = PHP is a general-purpose scripting language geared toward web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group. If sudo right is given to php application for the user, then the user can run system commands as root and possibly get a root shell.
action.escu.enabled = 1
action.escu.full_search_name = ESCU - Linux PHP Privilege Escalation - Rule
action.escu.how_to_implement = To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints into the Endpoint datamodel. If you are using Sysmon, you can use the Add-on for Linux Sysmon from Splunkbase.
action.escu.known_false_positives = False positives may be present, filter as needed.
action.escu.mappings = {"cis20": ["CIS 10"], "kill_chain_phases": ["Exploitation"], "mitre_attack": ["T1548.003", "T1548"], "nist": ["DE.AE"]}
action.escu.modification_date = 2022-08-09
action.escu.product = ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"]
action.escu.providing_technologies = ["Sysmon", "Microsoft Windows", "Carbon Black Response", "CrowdStrike Falcon", "Symantec Endpoint Protection"]
action.escu.search_type = detection
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.populate_lookup.track_alert = false
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":30},{"risk_object_field":"parent_process_name","risk_object_type":"other","risk_score":30},{"risk_object_field":"process_name","risk_object_type":"other","risk_score":30}]
action.risk.param._risk_message = An instance of $parent_process_name$ spawning $process_name$ was identified on endpoint $dest$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.rss.track_alert = false
action.script.track_alert = true
action.send2uba.param.verbose = 0
action.summary_index.inline = true
action.summary_index.track_alert = false
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = 0
alert.suppress = 0
alert.track = false
allow_skew = 100%
auto_summarize = false
counttype = number of events
cron_schedule = */2 * * * *
description = PHP is a general-purpose scripting language geared toward web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group. If sudo right is given to php application for the user, then the user can run system commands as root and possibly get a root shell.
dispatch.allow_partial_results = true
dispatch.earliest_time = -70m@m
dispatch.latest_time = -10m@m
dispatch.lookups = true
dispatch.rt_backfill = false
dispatch.spawn_process = true
enableSched = true
is_visible = false
quantity = 0
realtime_schedule = false
relation = greater than
restart_on_searchpeer_add = true
run_on_startup = false
schedule_window = auto
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time)\
  as lastTime from datamodel=Endpoint.Processes where Processes.process="*php*-r*" AND Processes.process="*system*" by Processes.dest Processes.user Processes.parent_process_name\
  Processes.process_name Processes.process Processes.process_id Processes.parent_process_id\
  Processes.process_guid | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)`\
  | `security_content_ctime(lastTime)` | `linux_php_privilege_escalation_filter`

[Threat - Auditd - ESCU - Linux Possible Access Or Modification Of sshd Config File - Rule - Rule]
action.correlationsearch.annotations = {"analytic_story":["Linux Privilege Escalation","Linux Persistence Techniques","Linux Living Off The Land"],"cis20":["CIS 10"],"confidence":50,"impact":50,"kill_chain_phases":["Installation"],"mitre_attack":["T1098.004","T1098"],"nist":["DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Auditd - ESCU - Linux Possible Access Or Modification Of sshd Config File - Rule
action.email.inline = false
action.email.sendpdf = false
action.email.sendresults = false
action.email.track_alert = true
action.email.use_ssl = false
action.email.use_tls = false
action.email.width_sort_columns = true
action.escu.analytic_story = ["Linux Privilege Escalation", "Linux Persistence Techniques", "Linux Living Off The Land"]
action.escu.confidence = high
action.escu.creation_date = 2022-01-11
action.escu.data_models = ["Endpoint"]
action.escu.eli5 = This analytic is to look for suspicious process command-line that might be accessing or modifying sshd_config. This file is the ssh configuration file that might be modify by threat actors or adversaries to redirect port connection, allow user using authorized key generated during attack. This anomaly detection might catch noise from administrator auditing or modifying ssh configuration file. In this scenario filter is needed
action.escu.enabled = 1
action.escu.full_search_name = ESCU - Linux Possible Access Or Modification Of sshd Config File - Rule
action.escu.how_to_implement = To successfully implement this search, you need to be ingesting logs with the process name, parent process, and command-line executions from your endpoints. If you are using Sysmon, you can use the Add-on for Linux Sysmon from Splunkbase.
action.escu.known_false_positives = Administrator or network operator can use this commandline for automation purposes. Please update the filter macros to remove false positives.
action.escu.mappings = {"cis20": ["CIS 10"], "kill_chain_phases": ["Installation"], "mitre_attack": ["T1098.004", "T1098"], "nist": ["DE.AE"]}
action.escu.modification_date = 2022-01-11
action.escu.product = ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"]
action.escu.providing_technologies = ["Sysmon", "Microsoft Windows", "Carbon Black Response", "CrowdStrike Falcon", "Symantec Endpoint Protection"]
action.escu.search_type = detection
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.populate_lookup.track_alert = false
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":25}]
action.risk.param._risk_message = a commandline $process$ executed on $dest$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.rss.track_alert = false
action.script.track_alert = true
action.send2uba.param.verbose = 0
action.summary_index.inline = true
action.summary_index.track_alert = false
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = true
alert.suppress = 0
alert.track = false
allow_skew = 100%
auto_summarize = false
counttype = number of events
cron_schedule = 0 * * * *
description = This analytic is to look for suspicious process command-line that might be accessing or modifying sshd_config. This file is the ssh configuration file that might be modify by threat actors or adversaries to redirect port connection, allow user using authorized key generated during attack. This anomaly detection might catch noise from administrator auditing or modifying ssh configuration file. In this scenario filter is needed
dispatch.allow_partial_results = true
dispatch.earliest_time = -70m@m
dispatch.latest_time = -10m@m
dispatch.lookups = true
dispatch.rt_backfill = false
dispatch.spawn_process = true
enableSched = true
is_visible = false
quantity = 0
realtime_schedule = false
relation = greater than
restart_on_searchpeer_add = true
run_on_startup = false
schedule_window = auto
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_name IN("cat", "nano*","vim*", "vi*")  AND Processes.process IN("*/etc/ssh/sshd_config") by Processes.dest Processes.user Processes.parent_process_name Processes.process_name Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)` | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `linux_possible_access_or_modification_of_sshd_config_file_filter`

[Threat - Auditd - ESCU - Linux Possible Ssh Key File Creation - Rule - Rule]
action.correlationsearch.annotations = {"analytic_story":["Linux Privilege Escalation","Linux Persistence Techniques","Linux Living Off The Land"],"cis20":["CIS 10"],"confidence":60,"impact":60,"kill_chain_phases":["Installation"],"mitre_attack":["T1098.004","T1098"],"nist":["DE.AE"]}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Auditd - ESCU - Linux Possible Ssh Key File Creation - Rule
action.email.inline = false
action.email.sendpdf = false
action.email.sendresults = false
action.email.track_alert = true
action.email.use_ssl = false
action.email.use_tls = false
action.email.width_sort_columns = true
action.escu.analytic_story = ["Linux Privilege Escalation", "Linux Persistence Techniques", "Linux Living Off The Land"]
action.escu.confidence = high
action.escu.creation_date = 2022-01-11
action.escu.data_models = ["Endpoint"]
action.escu.eli5 = This analytic is to look for possible ssh key file creation on ~/.ssh/ folder. This technique is commonly abused by threat actors and adversaries to gain persistence and privilege escalation to the targeted host. by creating ssh private and public key and passing the public key to the attacker server. threat actor can access remotely the machine using openssh daemon service.
action.escu.enabled = 1
action.escu.full_search_name = ESCU - Linux Possible Ssh Key File Creation - Rule
action.escu.how_to_implement = To successfully implement this search, you need to be ingesting logs with the file name, file path, and process_guid executions from your endpoints. If you are using Sysmon, you can use the Add-on for Linux Sysmon from Splunkbase.
action.escu.known_false_positives = Administrator or network operator can create file in ~/.ssh folders for automation purposes. Please update the filter macros to remove false positives.
action.escu.mappings = {"cis20": ["CIS 10"], "kill_chain_phases": ["Installation"], "mitre_attack": ["T1098.004", "T1098"], "nist": ["DE.AE"]}
action.escu.modification_date = 2022-01-11
action.escu.product = ["Splunk Enterprise", "Splunk Enterprise Security", "Splunk Cloud"]
action.escu.providing_technologies = ["Sysmon", "Microsoft Windows", "Carbon Black Response", "CrowdStrike Falcon", "Symantec Endpoint Protection"]
action.escu.search_type = detection
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.populate_lookup.track_alert = false
action.risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"dest","risk_object_type":"system","risk_score":36}]
action.risk.param._risk_message = A file $file_name$ is created in $file_path$ on $dest$
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.rss.track_alert = false
action.script.track_alert = true
action.send2uba.param.verbose = 0
action.summary_index.inline = true
action.summary_index.track_alert = false
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.digest_mode = true
alert.suppress = 0
alert.track = false
allow_skew = 100%
auto_summarize = false
counttype = number of events
cron_schedule = 0 * * * *
description = This analytic is to look for possible ssh key file creation on ~/.ssh/ folder. This technique is commonly abused by threat actors and adversaries to gain persistence and privilege escalation to the targeted host. by creating ssh private and public key and passing the public key to the attacker server. threat actor can access remotely the machine using openssh daemon service.
dispatch.allow_partial_results = true
dispatch.earliest_time = -70m@m
dispatch.latest_time = -10m@m
dispatch.lookups = true
dispatch.rt_backfill = false
dispatch.spawn_process = true
enableSched = true
is_visible = false
quantity = 0
realtime_schedule = false
relation = greater than
restart_on_searchpeer_add = true
run_on_startup = false
schedule_window = auto
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Filesystem where Filesystem.file_path IN ("*/.ssh*") by Filesystem.dest Filesystem.file_name Filesystem.process_guid Filesystem.file_path | `drop_dm_object_name(Filesystem)` | `security_content_ctime(lastTime)` | `security_content_ctime(firstTime)` | `linux_possible_ssh_key_file_creation_filter`

[all auditd data]
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.forceCsvResults = 1
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
action.webhook.enable_allowlist = 0
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.visualizations.show = 0
request.ui_dispatch_app = auditd_sec_content_mapping
request.ui_dispatch_view = search
search = index="auditd_2"

